name: "PHPStan Baseline Refresh"
description: "Automatically create a PR when the PHPStan baseline can be refreshed"

inputs:
    github_token:
        description: "GitHub user token to create the PR"
        required: true
    baseline_path:
        description: "Path to PHPStan baseline file (.neon or .php)"
        required: true
    phpstan_path:
        description: "Path to PHPStan"
        default: "vendor/bin/phpstan"
        required: true
    phpstan_additional_arguments:
        description: "Additional arguments passed to the analyze command"
        default: "--ansi"
        required: false
    add_unmatched_errors_in_baseline:
        description: "When enabled, errors that pop up during the analyze run are ignored and added to the baseline too. This can be useful when your main branch is no longer passing because of a bad merge."
        default: false
    branch:
        description: "Name of the branch to push to"
        default: "phpstan-baseline"
        required: true
    target_branch:
        description: "Name of the branch to target the PR to"
        default: "main"
        required: true
    commit_name:
        description: "Name of the author"
        default: "GitHub Actions"
        required: true
    commit_email:
        description: "Email of the author"
        default: "actions@github.com"
        required: true
    commit_message:
        description: "Commit message when PHPStan baseline changed"
        default: "PHPStan > Update baseline"
        required: true
    pr_create:
        description: "Wether or not to create the PR"
        default: true
        required: true
    pr_title:
        description: "Title of the PR"
        default: "PHPStan > Update baseline"
        required: true
    pr_reviewer:
        description: "Comma-separated list (no spaces) of people and teams that should be added as reviewer"
        required: false
    pr_body:
        description: "Body of the PR"
        required: true
        default: |
            This PR is automatically created to cleanup our baseline.

            Since the last refresh of the baseline we have fixed {0} ignored errors.

            Keep it up all! :muscle:

            There are only {1} ignored errors left :sweat_smile:

runs:
    using: "composite"
    steps:
        -   name: PHPStan
            shell: bash
            continue-on-error: ${{ inputs.pr_create == 1 && inputs.add_unmatched_errors_in_baseline == 1 }}
            run: |
                echo "Running PHPStan"
                ${{ inputs.phpstan_path }} analyze ${{ inputs.phpstan_additional_arguments }}
        -   name: Ignored errors
            id: before-refresh
            shell: bash
            run: |
                set -eu
                if [[ "${{ inputs.baseline_path }}" == *.neon ]]; then
                    IGNORED_COUNT=$(cat ${{ inputs.baseline_path }} | grep 'count: ' | sed 's/[^0-9]*//g' | paste -sd+ - | bc)
                elif [[ "${{ inputs.baseline_path }}" == *.php ]]; then
                    IGNORED_COUNT=$(cat ${{ inputs.baseline_path }} | grep "'count' => " | sed 's/[^0-9]*//g' | paste -sd+ - | bc)
                else
                    echo "Baseline is not a .neon or .php file"
                    exit 1
                fi
                
                echo "Baseline currently has $IGNORED_COUNT ignored errors"
                echo "ignored-count=$IGNORED_COUNT" >> $GITHUB_OUTPUT
        -   name: Refresh baseline
            if: ${{ inputs.pr_create == 1 }}
            id: refresh-baseline
            shell: bash
            run: |
                set -eu
                echo "Generating new baseline"
                ${{ inputs.phpstan_path }} analyze ${{ inputs.phpstan_additional_arguments }} --generate-baseline
                CHANGED=$(git diff --quiet ${{ inputs.baseline_path }} && echo 0 || echo 1)
                echo "changed=$CHANGED" >> $GITHUB_OUTPUT
                
                if [[ "${{ inputs.baseline_path }}" == *.neon ]]; then
                    NEW_IGNORED_COUNT=$(cat ${{ inputs.baseline_path }} | grep 'count: ' | sed 's/[^0-9]*//g' | paste -sd+ - | bc)
                elif [[ "${{ inputs.baseline_path }}" == *.php ]]; then
                    NEW_IGNORED_COUNT=$(cat ${{ inputs.baseline_path }} | grep "'count' => " | sed 's/[^0-9]*//g' | paste -sd+ - | bc)
                fi
                echo "Baseline now has $NEW_IGNORED_COUNT ignored errors"
                echo "new-ignored-count=$NEW_IGNORED_COUNT" >> $GITHUB_OUTPUT

                FIXED=$(echo "${{ steps.before-refresh.outputs.ignored-count }} - " $NEW_IGNORED_COUNT | bc)
                echo "Fixed $FIXED error(s)"
                echo "fixed=$FIXED" >> $GITHUB_OUTPUT
        -   name: Push baseline to branch
            if: ${{ inputs.pr_create == 1 && steps.refresh-baseline.outputs.changed == 1 }}
            shell: bash
            run: |
                set -eu
                echo "Pushing baseline to branch ${{ inputs.branch }}"
                git config --local user.email "${{ inputs.commit_email }}"
                git config --local user.name "${{ inputs.commit_name }}"
                git checkout -b ${{ inputs.branch }}
                git add ${{ inputs.baseline_path }}
                git commit -m "${{ inputs.commit_message }}"
                git push --set-upstream origin ${{ inputs.branch }} --force
        -   name: Create PR
            uses: repo-sync/pull-request@v2.12.1
            if: ${{ inputs.pr_create == 1 && steps.refresh-baseline.outputs.changed == 1 }}
            with:
                source_branch: ${{ inputs.branch }}
                destination_branch: ${{ inputs.target_branch }}
                pr_reviewer: ${{ inputs.pr_reviewer }}
                pr_title: ${{ inputs.pr_title }}
                pr_body: ${{ format(inputs.pr_body, steps.refresh-baseline.outputs.fixed, steps.refresh-baseline.outputs.new-ignored-count) }}
                pr_draft: false
                pr_allow_empty: false
                github_token: ${{ inputs.github_token }}
